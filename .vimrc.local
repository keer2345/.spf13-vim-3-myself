inoremap jj <ESC>

" syntax on
syntax enable
autocmd VimEnter * set nospell

" set nowrap	"自动换行
set wrap	"自动折行

" set background=dark
" colorscheme solarized
" colorscheme ir_black
" colorscheme gruvbox
colorscheme evening

set hlsearch	"highlight matchs
set incsearch	"在输入查找内容时，vim就进行匹配
set ignorecase	"查找时，忽视大小写

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-w> <C-w>w

noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

nnoremap <Leader>\ :vs 
nnoremap <Leader>- :sp 

" mouse
" :set mouse=a  "mouse enable
:set mouse-=a  "mouse disable"

"NERDTree
nmap <silent> <Leader>e :NERDTreeToggle<CR>
let NERDTreeShowHidden=0
let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.class','\.beam']

" plasticboy/vim-markdown
" let g:vim_markdown_folding_level = 6

" vim-instant-markdown
" let g:instant_markdown_autostart = 0
" nmap <silent> <Leader>mp :InstantMarkdownPreview<CR>
" amcco/markdown-preview.vim
nmap <silent> <Leader>mp :MarkdownPreview<CR>
nmap <silent> <Leader>ms :MarkdownPreviewStop<CR>

" NERDCommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" airline
""""""""airline begin""""""""
let g:airline_theme="luna"
let g:airline_powerline_fonts = 1
" 打开tabline功能,方便查看Buffer和切换,省去了minibufexpl插件
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
" 关闭状态显示空白符号计数
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
" 设置consolas字体"前面已经设置过
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '㏑'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'


let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

" nathanaelkane/vim-indent-guides
" set ts=4 sw=4 et
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" python-mode
let g:pymode_lint_cwindow = 0


"代码格式优化化
map <F6> :call FormartSrc()<CR><CR><ESC><ESC>

"定义FormartSrc()
func FormartSrc()
    exec "w"
    if &filetype == 'c'
        exec "!astyle --style=ansi -a --suffix=none %"
    elseif &filetype == 'cpp' || &filetype == 'hpp'
        exec "r !astyle --style=ansi --one-line=keep-statements -a --suffix=none %> /dev/null 2>&1"
    elseif &filetype == 'perl'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'py'||&filetype == 'python'
			exec "r !autopep8 -i --aggressive %"
    elseif &filetype == 'java'
        exec "!astyle --style=java --suffix=none %"
    elseif &filetype == 'jsp'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'xml'
        exec "!astyle --style=gnu --suffix=none %"
    else
        exec "normal gg=G"
        return
    endif
    exec "e! %"
endfunc
"结束定义FormartSrc
"
"
" mzlogin/vim-markdown-toc'
" 将光标移动到你想放置文章目录的地方，然后运行如下两个命令之一就行：
"
" :GenTocGFM
" 生成 GFM 链接风格的文章目录。
" 适用于 GitHub 仓库里的 Markdown 文件，比如 README.md，还有用于生成 GitBook 电子书的 Markdown 文件。

" :GenTocRedcarpet
" 生成 Redcarpet 链接风格的文章目录。
" 适用于使用 Redcarpet 作为 Markdown 解析引擎的 Jekyll 程序或其它地方。

" 更新已有目录
" 使用 :UpdateToc 命令就好了。



" godlygeek/tabular
nmap <silent> <Leader>a= :Tabularize /=<CR>
nmap <silent> <Leader>a- :Tabularize /-><CR>
nmap <silent> <Leader>a+ :Tabularize /+<CR>
nmap <silent> <Leader>a: :Tabularize /:<CR>
nmap <silent> <Leader>a:: :Tabularize /:\zs<CR>
nmap <silent> <Leader>a, :Tabularize /,<CR>
nmap <silent> <Leader>a<Bar> :Tabularize /<Bar><CR>

" Chiel92/vim-autoformat
noremap <F7> :Autoformat<CR>
